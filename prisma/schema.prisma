// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  phone String? @unique
  email String? @unique
  name String
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  favs Fav[]
  posts Post[]
  answers Answer[]
  wonderings Wondering[]
  writtenReviews Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")
  sales Sale[]
  purchases Purchase[]
}

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image String
  name String
  price Int
  description String @db.MediumText 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  favs Fav[]
  sales Sale[]
  purchases Purchase[]
}

model Fav {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  question String @db.MediumText
  latitude Float?
  longitude Float?
  answers Answer[]
  wonderings Wondering[]
}

model Answer {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  answer String @db.MediumText
}

model Wondering {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Review {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review String @db.MediumText
  createdBy User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor User @relation(name: "receivedReviews", fields: [createdFroId], references: [id], onDelete: Cascade)
  createdFroId Int
}

model Sale {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Purchase {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}